{"version":3,"sources":["components/NavBar/index.js","components/Footer/index.js","components/GameCard/index.js","pages/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","message","score","topScore","Footer","id","target","rel","GameCard","role","style","backgroundImage","concat","url","alt","onClick","Game","state","clicked","images","updateScore","key","_this","includes","setState","sort","Math","random","Object","toConsumableArray","console","log","_this2","this","Fragment","components_NavBar","map","i","components_GameCard","components_Footer","Component","App","pages_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAYeA,MAVR,SAAgBC,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,eACAJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMM,SACrCL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,UAAsCJ,EAAMO,MAA5C,iBAAiEP,EAAMQ,YCS9DC,MAdR,WACL,OACAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uCAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBM,GAAG,aAAlC,iBACIT,EAAAC,EAAAC,cAAA,oEAIAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBC,KAAK,mCAAmCM,OAAO,SAASC,IAAI,uBAA1F,2BCDOC,MANR,SAAkBb,GACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKW,KAAK,MAAMV,UAAU,8BAA8BW,MAAO,CAAEC,gBAAe,OAAAC,OAAUjB,EAAMkB,IAAhB,MAA0BC,IAAI,aAAaC,QAASpB,EAAMoB,WC6D/HC,6MA7DbC,MAAQ,CACNf,MAAO,EACPD,QAAS,4BACTE,SAAU,EACVe,QAAS,GACTC,OAAQ,CACN,6BACA,0BACA,iCACA,yBACA,2BACA,4BACA,0BACA,gCAIJC,YAAc,SAACC,GACVC,EAAKL,MAAMC,QAAQK,SAASF,GAC7BC,EAAKE,SAAS,CACZtB,MAAO,EACPgB,QAAS,GACTjB,QAAS,wBACTkB,OAAQG,EAAKL,MAAME,OAAOM,KAAK,iBAAM,GAAMC,KAAKC,aAIlDL,EAAKE,SAAS,CACZtB,MAAOoB,EAAKL,MAAMf,MAAQ,EAC1BgB,QAAO,GAAAN,OAAAgB,OAAAC,EAAA,EAAAD,CAAMN,EAAKL,MAAMC,SAAjB,CAA0BG,IACjCpB,QAAS,0BACTE,SAAUmB,EAAKL,MAAMf,MAAQ,EAAIoB,EAAKL,MAAMd,SAAWmB,EAAKL,MAAMf,MAAQ,EAAIoB,EAAKL,MAAMd,SACzFgB,OAAQG,EAAKL,MAAME,OAAOM,KAAK,iBAAM,GAAMC,KAAKC,aAGpDG,QAAQC,IAAIT,EAAKL,gFAGV,IAAAe,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAACF,EAAAC,EAAMqC,SAAP,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,CACElC,QAASgC,KAAKhB,MAAMhB,QACpBC,MAAO+B,KAAKhB,MAAMf,MAClBC,SAAU8B,KAAKhB,MAAMd,WAEvBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2EACZkC,KAAKhB,MAAME,OAAOiB,IAAI,SAACvB,EAAKwB,GAAN,OACrBzC,EAAAC,EAAAC,cAACwC,EAAD,CACEjB,IAAKgB,EACLxB,IAAKA,EACLE,QAAS,kBAAMiB,EAAKZ,YAAYP,SAItCjB,EAAAC,EAAAC,cAACyC,EAAD,cAxDWC,aCQJC,mLANX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,aAHYF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42abcc79.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function NavBar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark d-flex justify-content-around\">\r\n      <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\r\n      <span className=\"navbar-text\">{props.message}</span>\r\n      <span className=\"navbar-text\">Score: {props.score} | Top Score: {props.topScore}</span>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\nexport function Footer() {\r\n  return (\r\n  <footer className=\"bg-dark text-light m-0 fixed-bottom\">\r\n    <p className=\"text-center m-0\" id=\"copyright\">Copyright &copy;\r\n        <script>\r\n            var d = new Date()\r\n            document.write(d.getFullYear())\r\n        </script> \r\n        <a className=\"copyright-link\" href=\"https://github.com/Dylan-Thomson\" target=\"_blank\" rel=\"noopener noreferrer\"> Dylan Thomson</a>\r\n    </p>\r\n  </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport function GameCard(props) {\r\n  return (\r\n    <div role=\"img\" className=\"game-card img-thumbnail m-2\" style={{ backgroundImage : `url(${props.url})` }} alt=\"Game Image\" onClick={props.onClick}></div>\r\n  )\r\n}\r\n\r\nexport default GameCard;","import React, { Component } from \"react\";\r\nimport NavBar from \"../components/NavBar\";\r\nimport Footer from \"../components/Footer\";\r\nimport GameCard from \"../components/GameCard\";\r\nclass Game extends Component {\r\n  state = {\r\n    score: 0,\r\n    message: \"Click any image to begin!\",\r\n    topScore: 0,\r\n    clicked: [],\r\n    images: [\r\n      \"/assets/images/bowtie.jpeg\",\r\n      \"/assets/images/bwon.jpg\",\r\n      \"/assets/images/towelkitten.jpg\",\r\n      \"/assets/images/leo.jpg\",\r\n      \"/assets/images/white.jpg\",\r\n      \"/assets/images/aurora.jpg\",\r\n      \"/assets/images/fold.jpg\",\r\n      \"/assets/images/pounce.jpg\",\r\n    ]\r\n  }\r\n\r\n  updateScore = (key) => {\r\n    if(this.state.clicked.includes(key)) {\r\n      this.setState({\r\n        score: 0,\r\n        clicked: [],\r\n        message: \"Your Guess Was Wrong!\",\r\n        images: this.state.images.sort(() => 0.5 - Math.random())\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        score: this.state.score + 1,\r\n        clicked: [...this.state.clicked, key],\r\n        message: \"Your Guess Was Correct!\",\r\n        topScore: this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore,\r\n        images: this.state.images.sort(() => 0.5 - Math.random())\r\n      });\r\n    }\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar \r\n          message={this.state.message}\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n        />\r\n        <div className=\"container d-flex flex-row flex-wrap mx-auto justify-content-center my-5\">\r\n          {this.state.images.map((url, i) => (\r\n            <GameCard \r\n              key={i} \r\n              url={url} \r\n              onClick={() => this.updateScore(url)} \r\n            />\r\n          ))}\r\n        </div>\r\n        <Footer />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Game from './pages/Game'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Game />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}